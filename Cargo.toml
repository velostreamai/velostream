[package]
name = "velostream"
version = "0.1.0"
edition = "2021"
rust-version = "1.80.0"
license = "Apache-2.0"
authors = ["Velostream Contributors"]
description = "High-performance stream processing engine with SQL support"
repository = "https://github.com/velostreamai/velostream"
keywords = ["streaming", "sql", "kafka", "data-processing", "real-time"]
categories = ["database-implementations", "asynchronous", "data-structures"]

[profile.test]
incremental = true
codegen-units = 256  # For fast iteration during development
split-debuginfo = "packed"  # FASTER debug info on macOS

[profile.release]
incremental = true
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.dev]
opt-level = 0
debug = true
debug-assertions = true
overflow-checks = true
codegen-units = 256  # For fast iteration during development
incremental = true
split-debuginfo = "packed"  # FASTER debug info on macOS

[dependencies]
backtrace = "0.3.76"
pretty_env_logger = "0.5.0"
log = "0.4.27"
env_logger = "0.11.8"
rdkafka = "0.38.0"
tokio = { version = "1.47.0", features = [
    "rt-multi-thread",  # Multi-threaded async runtime with task management
    "time",              # Timing utilities: sleep, timeout, interval
    "sync",              # Synchronization: mpsc, Mutex, RwLock, Semaphore
    "macros",            # Attribute macros: #[tokio::main], #[tokio::test]
    "fs",                # Async file system operations
    "io-util",           # Async I/O: AsyncWriteExt, AsyncReadExt
    "net",               # Async networking: TcpListener, TcpStream
    "process",           # Subprocess handling for integration tests
    "signal",            # Unix signal handling (Ctrl+C) for examples
] }
chrono = { version = "0.4.41", features = ["serde"] }
uuid = { version = "1.17.0", features = ["v4"] }
logtest = "2.0.0"
futures = "0.3"
hostname = "0.4"
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9"
thiserror = "1.0.69"
nom = "7.1.3"
clap = { version = "4.0", features = ["derive"] }
rand = "0.8.5"
reqwest = { version = "0.11", features = ["json"] }
hyperloglogplus = "0.4.1"
rust_decimal = { version = "1.36.0", features = ["serde"] }
regex = "1.5"
async-trait = "0.1"
async-stream = "0.3"
lazy_static = "1.4"
inventory = "0.3"

# Dependencies for additional serialization formats (now always available)
apache-avro = { version = "0.20.0" }
prost = { version = "0.14.1" }
bincode = { version = "1.3.3", optional = true }
base64 = "0.21"

# Phase 4: Observability Dependencies
prometheus = "0.14.0"
opentelemetry = { version = "0.21", features = ["trace", "metrics"] }
opentelemetry_sdk = { version = "0.21", features = ["rt-tokio", "trace"] }
opentelemetry-otlp = { version = "0.14", features = ["tokio", "trace"] }
opentelemetry-semantic-conventions = "0.13"
sysinfo = "0.32"

[build-dependencies]
prost-build = { version = "0.14.1" }

[dev-dependencies]
serial_test = "2.0.0"
crossbeam-queue = "0.3"
tokio-stream = "0.1"
criterion = { version = "0.5", features = ["html_reports"] }
tempfile = "3.12.0"
futures = "0.3"


# Performance examples - organized in subfolder
[[example]]
name = "json_performance_test"
path = "examples/performance/json_performance_test.rs"

[[example]]
name = "raw_bytes_performance_test"
path = "examples/performance/raw_bytes_performance_test.rs"

[[example]]
name = "latency_performance_test"
path = "examples/performance/latency_performance_test.rs"

[[example]]
name = "simple_zero_copy_test"
path = "examples/performance/simple_zero_copy_test.rs"

[[example]]
name = "simple_async_optimization_test"
path = "examples/performance/simple_async_optimization_test.rs"

[[example]]
name = "resource_monitoring_test"
path = "examples/performance/resource_monitoring_test.rs"

[[example]]
name = "datasource_performance_test"
path = "examples/performance/datasource_performance_test.rs"

[[example]]
name = "quick_performance_test"
path = "examples/performance/quick_performance_test.rs"

# Benchmark examples - organized in subfolder
[[example]]
name = "table_performance_benchmark"
path = "examples/performance/table_performance_benchmark.rs"

[[example]]
name = "stream_table_join_baseline_benchmark"
path = "examples/performance/stream_table_join_baseline_benchmark.rs"

[[example]]
name = "phase4_batch_benchmark"
path = "examples/performance/phase4_batch_benchmark.rs"

# Demo examples
[[example]]
name = "table_financial_ctas_demo"
path = "examples/table_financial_ctas_demo.rs"

[[example]]
name = "stream_table_join_financial_demo"
path = "examples/stream_table_join_financial_demo.rs"

# Validator and utility demos
[[example]]
name = "test_sql_validator_demo"
path = "examples/test_sql_validator_demo.rs"

[[example]]
name = "test_batch_with_clause"
path = "examples/test_batch_with_clause.rs"

# Multi-Job SQL Server Binary
[[bin]]
name = "velo-sql-multi"
path = "src/bin/velo-sql-multi.rs"

# Velostream CLI Binary
[[bin]]
name = "velo-cli"
path = "src/bin/velo_cli.rs"

# File Processing Demo Binary
[[bin]]
name = "file_processing_demo"
path = "demo/datasource-demo/file_processing_demo.rs"

# Complete Pipeline Demo Binary
[[bin]]
name = "complete_pipeline_demo"
path = "demo/datasource-demo/complete_pipeline_demo.rs"

# SQL Batch Execution Binary
[[bin]]
name = "sql-batch"
path = "src/bin/sql_batch.rs"



# Features for test categorization
[features]
default = ["telemetry"]  # Enable telemetry by default
comprehensive-tests = []  # Enable comprehensive/slow tests that take 40+ seconds
telemetry = []  # Phase 3.2: Optional telemetry feature flag for zero-cost observation
                 # When disabled, all telemetry recording overhead is eliminated via dead code elimination
