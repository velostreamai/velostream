openapi: 3.0.3
info:
  title: VeloStream Multi-Job SQL Server API
  description: |
    Performance monitoring and job management API for VeloStream Multi-Job SQL Server.
    
    The Multi-Job SQL Server enables concurrent execution of multiple SQL applications
    against Kafka streams, with comprehensive performance monitoring and job lifecycle
    management capabilities.
    
    ## Getting Started
    
    Start the server with monitoring enabled:
    ```bash
    cargo run --bin velo-sql-multi server --enable-metrics --max-jobs 10
    ```
    
    Deploy a SQL application:
    ```bash
    cargo run --bin velo-sql-multi deploy-app --file trading-analytics.sql --brokers localhost:9092
    ```
    
    ## Features
    - Concurrent multi-job SQL processing
    - Per-job performance metrics and monitoring
    - Job lifecycle management (start, stop, pause, resume)
    - Aggregate performance metrics across all jobs
    - Real-time job status and resource utilization
    
  version: 1.0.0
  contact:
    name: VeloStream
    url: https://github.com/anthropics/velostream
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:9080
    description: Default metrics server (main port + 1000)
  - url: http://localhost:8080
    description: Main multi-job SQL server (when metrics on same port)

paths:
  /:
    get:
      summary: Server information and available endpoints
      description: |
        Returns basic server information and lists all available API endpoints.
        This endpoint is always available and includes job count information.
      operationId: getServerInfo
      responses:
        '200':
          description: Server information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfo'
              examples:
                monitoring_enabled:
                  summary: Multi-job server with monitoring enabled
                  value:
                    service: "velo-sql-multi-server"
                    status: "running"
                    endpoints:
                      "/metrics": "Prometheus metrics export"
                      "/health": "System health status (JSON)"
                      "/report": "Detailed performance report (text)"
                      "/jobs": "List all running jobs (JSON)"
                    monitoring: "enabled"
                monitoring_disabled:
                  summary: Multi-job server with monitoring disabled
                  value:
                    service: "velo-sql-multi-server"
                    status: "running"
                    endpoints:
                      "/jobs": "List all running jobs (JSON)"
                    monitoring: "disabled"
                    note: "Use --enable-metrics to enable performance monitoring"

  /metrics:
    get:
      summary: Prometheus metrics export
      description: |
        Exports aggregate performance metrics across all jobs in Prometheus format.
        
        ## Available Metrics
        - `velostream_queries_total` - Total queries across all jobs
        - `velostream_records_processed_total` - Total records across all jobs
        - `velostream_jobs_active` - Number of currently active jobs
        - `velostream_job_memory_usage` - Per-job memory usage
        - `velostream_job_throughput` - Per-job throughput metrics
        
        Only available when performance monitoring is enabled.
      operationId: getMetrics
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain:
              schema:
                type: string
                format: prometheus
                example: |
                  # HELP velostream_queries_total Total number of queries executed
                  # TYPE velostream_queries_total counter
                  velostream_queries_total 5678
                  
                  # HELP velostream_jobs_active Number of active jobs
                  # TYPE velostream_jobs_active gauge
                  velostream_jobs_active 3
                  
                  # HELP velostream_job_records_processed Records processed per job
                  # TYPE velostream_job_records_processed counter
                  velostream_job_records_processed{job="trading-analytics"} 125000
                  velostream_job_records_processed{job="order-matching"} 89000
                  velostream_job_records_processed{job="risk-monitor"} 45000
        '503':
          description: Metrics not available (monitoring disabled)
          content:
            text/plain:
              schema:
                type: string
                example: "Metrics not enabled"

  /health:
    get:
      summary: System and job health status
      description: |
        Returns comprehensive health information including:
        - Overall system health across all jobs
        - Per-job performance metrics
        - Resource utilization warnings
        - Job failure alerts
        
        ## Health Thresholds
        - **Critical**: Any job with avg latency > 1000ms or job failures
        - **Warning**: Low aggregate throughput or high memory usage
        
        Only available when performance monitoring is enabled.
      operationId: getHealth
      responses:
        '200':
          description: Health status information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Health monitoring not available
          content:
            text/plain:
              schema:
                type: string
                example: "Health monitoring not enabled"

  /report:
    get:
      summary: Detailed performance report with job breakdown
      description: |
        Returns a comprehensive performance report including:
        - Aggregate system metrics across all jobs
        - Per-job performance breakdown
        - Job resource utilization analysis
        - Query pattern analysis by job
        - Job failure and error analysis
        
        Only available when performance monitoring is enabled.
      operationId: getPerformanceReport
      responses:
        '200':
          description: Performance report including job information
          content:
            text/plain:
              schema:
                type: string
                example: |
                  =====================================
                  VeloStream Multi-Job Performance Report
                  =====================================
                  Generated: 2025-01-24 10:30:00 UTC
                  Status: Healthy
                  
                  === Overall Metrics ===
                  Total Queries: 5,678
                  Total Records Processed: 259,000
                  Average Query Time: 38.7ms
                  Aggregate Throughput: 345.2 records/sec
                  
                  === Job Information ===
                  Active Jobs: 3
                  
                    - trading-analytics: Running (records: 125,000, rps: 156.2)
                    - order-matching: Running (records: 89,000, rps: 112.8)
                    - risk-monitor: Running (records: 45,000, rps: 76.2)
                  
                  === Top Query Patterns ===
                  1. SELECT * FROM trades WHERE price > ? - 1,234 executions
                  2. SELECT COUNT(*) FROM orders GROUP BY symbol - 987 executions
                  3. SELECT * FROM positions WHERE risk_level = 'HIGH' - 654 executions
                  
                  Health Issues: None
                  Warnings: None
        '503':
          description: Performance monitoring not available
          content:
            text/plain:
              schema:
                type: string
                example: "Performance monitoring not enabled"

  /jobs:
    get:
      summary: List all running jobs with metrics
      description: |
        Returns detailed information about all currently running jobs including:
        - Job metadata (name, version, topic, created time)
        - Current job status (Running, Paused, Stopped, Failed)
        - Per-job performance metrics
        - Resource utilization by job
        
        This endpoint is always available regardless of monitoring configuration.
      operationId: listJobs
      responses:
        '200':
          description: List of all jobs with their current status and metrics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobSummary'
              example:
                - name: "trading-analytics"
                  version: "v1.2.0"
                  topic: "trades"
                  status: "Running"
                  created_at: "2025-01-24T09:15:00Z"
                  metrics:
                    records_processed: 125000
                    records_per_second: 156.2
                    last_record_time: "2025-01-24T10:29:45Z"
                    errors: 0
                    memory_usage_mb: 45.6
                - name: "order-matching"
                  version: "v2.1.0"
                  topic: "orders"
                  status: "Running"
                  created_at: "2025-01-24T09:20:00Z"
                  metrics:
                    records_processed: 89000
                    records_per_second: 112.8
                    last_record_time: "2025-01-24T10:29:50Z"
                    errors: 2
                    memory_usage_mb: 32.1
                - name: "risk-monitor"
                  version: "v1.0.0"
                  topic: "positions"
                  status: "Paused"
                  created_at: "2025-01-24T09:25:00Z"
                  metrics:
                    records_processed: 45000
                    records_per_second: 0.0
                    last_record_time: "2025-01-24T10:15:30Z"
                    errors: 1
                    memory_usage_mb: 18.3

components:
  schemas:
    ServerInfo:
      type: object
      properties:
        service:
          type: string
          example: "velo-sql-multi-server"
          description: Service identifier
        status:
          type: string
          enum: [running, starting, stopping]
          example: "running"
          description: Current server status
        monitoring:
          type: string
          enum: [enabled, disabled]
          example: "enabled"
          description: Performance monitoring status
        endpoints:
          type: object
          additionalProperties:
            type: string
          example:
            "/metrics": "Prometheus metrics export"
            "/health": "System health status (JSON)"
            "/report": "Detailed performance report (text)"
            "/jobs": "List all running jobs (JSON)"
          description: Available API endpoints with descriptions
        note:
          type: string
          example: "Use --enable-metrics to enable performance monitoring"
          description: Additional information (when monitoring disabled)
      required:
        - service
        - status
        - monitoring

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [Healthy, Warning, Critical]
          example: "Healthy"
          description: Overall system health status across all jobs
        issues:
          type: array
          items:
            type: string
          example: []
          description: Critical performance issues requiring immediate attention
        warnings:
          type: array
          items:
            type: string
          example: ["Job 'risk-monitor' has high error rate: 5.2%"]
          description: Performance warnings that should be monitored
        metrics:
          $ref: '#/components/schemas/PerformanceMetrics'
        job_count:
          type: integer
          example: 3
          description: Total number of active jobs
      required:
        - status
        - issues
        - warnings
        - metrics
        - job_count

    PerformanceMetrics:
      type: object
      properties:
        memory:
          $ref: '#/components/schemas/MemoryMetrics'
        throughput:
          $ref: '#/components/schemas/ThroughputMetrics'
        processors:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ProcessorMetrics'
          description: Aggregate processor metrics across all jobs
        total_queries:
          type: integer
          format: int64
          example: 5678
          description: Total number of queries executed across all jobs
        total_execution_time:
          type: string
          format: duration
          example: "247.891s"
          description: Total execution time across all queries and jobs
      required:
        - memory
        - throughput
        - processors
        - total_queries

    MemoryMetrics:
      type: object
      properties:
        allocated_bytes:
          type: integer
          format: int64
          example: 104857600
          description: Currently allocated memory across all jobs in bytes
        peak_memory_bytes:
          type: integer
          format: int64
          example: 209715200
          description: Peak memory usage across all jobs in bytes
        group_by_memory_bytes:
          type: integer
          format: int64
          example: 52428800
          description: Memory used by GROUP BY operations across all jobs
        window_memory_bytes:
          type: integer
          format: int64
          example: 26214400
          description: Memory used by window functions across all jobs
        join_memory_bytes:
          type: integer
          format: int64
          example: 13107200
          description: Memory used by JOIN operations across all jobs
        allocation_count:
          type: integer
          format: int64
          example: 2456
          description: Total number of memory allocations across all jobs
      required:
        - allocated_bytes
        - peak_memory_bytes

    ThroughputMetrics:
      type: object
      properties:
        records_per_second:
          type: number
          format: double
          example: 345.2
          description: Aggregate records processed per second across all jobs
        bytes_per_second:
          type: number
          format: double
          example: 34520.0
          description: Aggregate bytes processed per second across all jobs
        queries_per_second:
          type: number
          format: double
          example: 15.7
          description: Aggregate queries executed per second across all jobs
        avg_query_latency_ms:
          type: number
          format: double
          example: 38.7
          description: Average query execution time across all jobs in milliseconds
        p50_latency_ms:
          type: number
          format: double
          example: 28.3
          description: 50th percentile query latency across all jobs
        p95_latency_ms:
          type: number
          format: double
          example: 115.6
          description: 95th percentile query latency across all jobs
        p99_latency_ms:
          type: number
          format: double
          example: 234.8
          description: 99th percentile query latency across all jobs
      required:
        - records_per_second
        - bytes_per_second
        - queries_per_second

    ProcessorMetrics:
      type: object
      properties:
        processor_name:
          type: string
          example: "SelectProcessor"
          description: Name of the SQL processor
        records_processed:
          type: integer
          format: int64
          example: 25000
          description: Number of records processed by this processor across all jobs
        execution_time:
          type: string
          format: duration
          example: "12.345s"
          description: Total execution time for this processor across all jobs
        success_count:
          type: integer
          format: int64
          example: 24750
          description: Number of successful executions across all jobs
        error_count:
          type: integer
          format: int64
          example: 250
          description: Number of failed executions across all jobs
        memory_usage:
          $ref: '#/components/schemas/MemoryMetrics'
      required:
        - processor_name
        - records_processed
        - success_count
        - error_count

    JobSummary:
      type: object
      properties:
        name:
          type: string
          example: "trading-analytics"
          description: Unique job identifier
        version:
          type: string
          example: "v1.2.0"
          description: Job version from SQL application metadata
        topic:
          type: string
          example: "trades"
          description: Primary Kafka topic being processed by this job
        status:
          $ref: '#/components/schemas/JobStatus'
        created_at:
          type: string
          format: date-time
          example: "2025-01-24T09:15:00Z"
          description: When the job was started
        metrics:
          $ref: '#/components/schemas/JobMetrics'
      required:
        - name
        - version
        - topic
        - status
        - created_at
        - metrics

    JobStatus:
      type: string
      enum:
        - Starting
        - Running
        - Paused
        - Stopped
        - Failed
      description: |
        Current job execution status:
        - **Starting**: Job is initializing
        - **Running**: Job is actively processing records
        - **Paused**: Job is temporarily suspended
        - **Stopped**: Job has been terminated normally
        - **Failed**: Job terminated due to an error
      example: "Running"

    JobMetrics:
      type: object
      properties:
        records_processed:
          type: integer
          format: int64
          example: 125000
          description: Total number of records processed by this job
        records_per_second:
          type: number
          format: double
          example: 156.2
          description: Current processing rate for this job
        last_record_time:
          type: string
          format: date-time
          nullable: true
          example: "2025-01-24T10:29:45Z"
          description: Timestamp of the last processed record
        errors:
          type: integer
          format: int64
          example: 0
          description: Number of processing errors encountered by this job
        memory_usage_mb:
          type: number
          format: double
          example: 45.6
          description: Current memory usage by this job in megabytes
      required:
        - records_processed
        - records_per_second
        - errors
        - memory_usage_mb

tags:
  - name: monitoring
    description: Performance monitoring and metrics across all jobs
  - name: health
    description: System and job health status checks
  - name: jobs
    description: Job management and status information