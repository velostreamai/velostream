# Common Kafka Data Source Configuration
# Base configuration for all Kafka data sources in the trading system
# URIs are constructed as: kafka://{bootstrap_servers}/{topic_name}

datasource:
  type: kafka
  
  # Standard consumer configuration for trading system
  consumer_config:
    bootstrap.servers: "localhost:9092"
    # Use 'earliest' for demos to process all existing data from topic start
    # Use 'latest' in production to only process new messages after subscription
    auto.offset.reset: "earliest"
    enable.auto.commit: true
    auto.commit.interval.ms: 100
    session.timeout.ms: 6000
    heartbeat.interval.ms: 2000

    # Note: librdkafka automatically retries topic subscription indefinitely
    # with built-in metadata refresh. No explicit retry config needed.
    
  # Common schema settings
  schema:
    key.format: string
    value.format: json
#    value.format: avro
    # Note: Schema registry NOT used - Avro schemas are reverenced via config files
    # schema.registry.url: "http://schema-registry:8081"

    # Schema configuration for value serialization
#    value.serializer: "avro"
    value.serializer: "json"

    # Schema Registry authentication (if needed)
    # registry_username: "trading_user"
    # registry_password: "trading_pass"
    
    # Alternative schema configurations:
    # For inline Avro schema:
    # avro.schema: |
    #   {
    #     "type": "record",
    #     "name": "TradingRecord",
    #     "fields": [
    #       {"name": "symbol", "type": "string"},
    #       {"name": "price", "type": {"type": "bytes", "logicalType": "decimal", "precision": 19, "scale": 4}},
    #       {"name": "volume", "type": "long"},
    #       {"name": "timestamp", "type": "long"}
    #     ]
    #   }
    #
    # For schema files:
    # avro.schema.file: "./schemas/trading_common.avsc"
    #
    # For Protobuf (if switching formats):
    # value.format: protobuf 
    # protobuf.schema.file: "./schemas/trading_common.proto"
    
  # Default performance settings
  performance:
    compression.type: "lz4"
    
  # Default stream properties
  stream.config:
    replication.factor: 3
    cleanup.policy: "delete"
    
# Performance profiles that can be referenced
performance_profiles:
  ultra_low_latency:
    fetch.max.wait.ms: 10
    max.poll.records: 1000
    fetch.min.bytes: 1024
    buffer.size: 65536
    batch.size: 1000
    linger.ms: 1
    
  high_throughput:
    fetch.max.wait.ms: 50
    max.poll.records: 2000
    fetch.min.bytes: 2048
    buffer.size: 131072
    batch.size: 2000
    linger.ms: 5
    
  balanced:
    fetch.max.wait.ms: 20
    max.poll.records: 1000
    fetch.min.bytes: 1024
    buffer.size: 65536
    batch.size: 1000
    linger.ms: 2