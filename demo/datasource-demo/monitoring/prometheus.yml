# Prometheus configuration for Velostream Demo monitoring

global:
  scrape_interval: 15s
  evaluation_interval: 15s

# Alertmanager configuration (optional)
alerting:
  alertmanagers:
    - static_configs:
        - targets: []

# Load rules once and periodically evaluate them  
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# Scrape configuration
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # Kafka JMX metrics
  - job_name: 'kafka'
    static_configs:
      - targets: ['kafka:9101']
    metrics_path: /metrics
    scrape_interval: 30s
    scrape_timeout: 10s

  # Velostream application metrics (if exposed)
  - job_name: 'velostream'
    static_configs:
      - targets: ['host.docker.internal:8888']  # Adjust port as needed
    metrics_path: /metrics
    scrape_interval: 15s
    scrape_timeout: 5s

  # Schema Registry metrics  
  - job_name: 'schema-registry'
    static_configs:
      - targets: ['schema-registry:8081']
    metrics_path: /metrics
    scrape_interval: 30s

  # Kafka Connect metrics
  - job_name: 'kafka-connect'
    static_configs:
      - targets: ['kafka-connect:8083']
    metrics_path: /metrics  
    scrape_interval: 30s

  # Redis metrics (if redis-exporter is added)
  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']
    metrics_path: /metrics
    scrape_interval: 30s

  # Node exporter for system metrics (if added)
  - job_name: 'node'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 30s

# Custom recording rules for Velostream metrics
recording_rules:
  - name: velostream_aggregations
    rules:
      # Calculate processing rate over 5 minutes
      - record: velostream:processing_rate_5m
        expr: rate(velostream_records_processed_total[5m])
        
      # Calculate error rate percentage
      - record: velostream:error_rate_percent_5m  
        expr: rate(velostream_errors_total[5m]) / rate(velostream_records_processed_total[5m]) * 100
        
      # Average processing latency
      - record: velostream:avg_latency_5m
        expr: rate(velostream_processing_latency_seconds_sum[5m]) / rate(velostream_processing_latency_seconds_count[5m])

# Alerting rules for demo monitoring
alerting_rules:
  - name: velostream_alerts
    rules:
      # High error rate alert
      - alert: HighErrorRate
        expr: velostream:error_rate_percent_5m > 5
        for: 2m
        labels:
          severity: warning
          service: velostream
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value }}% over the last 5 minutes"
          
      # Low throughput alert  
      - alert: LowThroughput
        expr: velostream:processing_rate_5m < 10
        for: 5m
        labels:
          severity: warning
          service: velostream
        annotations:
          summary: "Low processing throughput"
          description: "Processing rate is {{ $value }} records/sec"
          
      # High processing latency
      - alert: HighLatency
        expr: velostream:avg_latency_5m > 0.1  # 100ms
        for: 3m
        labels:
          severity: warning  
          service: velostream
        annotations:
          summary: "High processing latency"
          description: "Average latency is {{ $value }}s over the last 5 minutes"

# Remote write configuration (for production)
# remote_write:
#   - url: "https://prometheus-remote-write-endpoint"
#     basic_auth:
#       username: "user"
#       password: "password"