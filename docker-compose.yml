# VeloStream with All Serialization Formats (JSON, Avro, Protobuf)
version: '3.8'

services:
  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - velo-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - velo-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Schema Registry for Avro serialization
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - velo-network

  # VeloStream with ALL serialization formats (JSON, Avro, Protobuf)
  velo-streams:
    build: .
    container_name: velo-streams
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8080:8080"  # SQL API
      - "9090:9090"  # Management API
    environment:
      - RUST_LOG=info
      - KAFKA_BROKERS=kafka:29092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - VELO_SERIALIZATION_FORMATS=json,avro,protobuf
    volumes:
      - ./examples:/app/examples:ro
      - ./data:/app/data
    networks:
      - velo-network
    command: >
      velo-sql-multi
      --host 0.0.0.0
      --port 8080
      --kafka-brokers kafka:29092
    healthcheck:
      test: ["CMD", "velo-sql-multi", "--help"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Multi-format data producer
  multi-format-producer:
    image: confluentinc/cp-kafka:7.4.0
    container_name: multi-format-producer
    depends_on:
      - kafka
      - schema-registry
      - velo-streams
    volumes:
      - ./test-data:/test-data:ro
    networks:
      - velo-network
    command: >
      bash -c "
        # Wait for services
        sleep 15
        
        # Create topics for each format
        kafka-topics --bootstrap-server kafka:29092 --create --topic json-financial --partitions 3 --replication-factor 1 --if-not-exists
        kafka-topics --bootstrap-server kafka:29092 --create --topic avro-trades --partitions 3 --replication-factor 1 --if-not-exists  
        kafka-topics --bootstrap-server kafka:29092 --create --topic proto-positions --partitions 3 --replication-factor 1 --if-not-exists
        
        echo 'Topics created. Producing multi-format financial data...'
        
        # Produce JSON financial data with ScaledInteger precision
        for i in {1..100}; do
          echo '{\"symbol\":\"AAPL\",\"price\":\"150.2567\",\"quantity\":100,\"total\":\"15025.67\",\"timestamp\":\"2024-01-01T10:00:$${i}Z\"}' | kafka-console-producer --broker-list kafka:29092 --topic json-financial
          echo '{\"symbol\":\"GOOGL\",\"price\":\"2750.89\",\"quantity\":50,\"total\":\"137544.50\",\"timestamp\":\"2024-01-01T10:00:$${i}Z\"}' | kafka-console-producer --broker-list kafka:29092 --topic json-financial
          sleep 2
        done
        
        echo 'Multi-format data production complete. Container will stay running for debugging.'
        tail -f /dev/null
      "

  # Kafka UI for monitoring all formats
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8085:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=velo-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://schema-registry:8081
      - DYNAMIC_CONFIG_ENABLED=true
    networks:
      - velo-network

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: velo-prometheus
    ports:
      - "9093:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - velo-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: velo-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=velo123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - velo-network
    profiles:
      - monitoring

volumes:
  kafka-data:
    driver: local
  sql-logs:
    driver: local
  sql-data:
    driver: local
  multi-sql-logs:
    driver: local
  multi-sql-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  velo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16