name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_DEV_DEBUG: 0
  RUST_BACKTRACE: 1

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  # Fast feedback - runs first, completes in ~3-5 minutes
  quick-check:
    name: Quick Check
    runs-on: ubuntu-latest
    outputs:
      test-results: ${{ steps.test-results.outputs.results }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust Environment
      uses: ./.github/actions/setup-rust
      with:
        rust-version: stable
        components: rustfmt,clippy
        cache-suffix: quick

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Check compilation
      run: cargo check --all-targets --no-default-features

    - name: Run clippy
      run: cargo clippy --all-targets --no-default-features

    - name: Run unit tests
      id: unit-tests
      run: |
        cargo test --lib --no-default-features --quiet > test_results.txt 2>&1 || {
          echo "❌ Unit tests failed"
          cat test_results.txt
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        }

        # Extract test results
        PASSED=$(grep -o "test result: ok. [0-9]* passed" test_results.txt | grep -o "[0-9]*" | head -1 || echo "0")
        FAILED=$(grep -o "[0-9]* failed" test_results.txt | grep -o "[0-9]*" | head -1 || echo "0")

        echo "status=passed" >> $GITHUB_OUTPUT
        echo "passed=${PASSED}" >> $GITHUB_OUTPUT
        echo "failed=${FAILED}" >> $GITHUB_OUTPUT
        echo "✅ Unit tests passed: ${PASSED} passed, ${FAILED} failed"

    - name: Test examples compile
      run: |
        cargo check --example builder_configuration --no-default-features
        cargo check --example consumer_with_headers --no-default-features
        cargo check --example fluent_api_example --no-default-features
        cargo check --example json_performance_test --no-default-features

    - name: Set test results output
      id: test-results
      run: |
        echo "results={\"status\":\"${{ steps.unit-tests.outputs.status }}\",\"passed\":\"${{ steps.unit-tests.outputs.passed }}\",\"failed\":\"${{ steps.unit-tests.outputs.failed }}\"}" >> $GITHUB_OUTPUT

  # Comprehensive tests - only run after quick-check passes
  comprehensive-tests:
    name: Comprehensive Tests
    runs-on: ubuntu-latest
    needs: quick-check
    if: needs.quick-check.result == 'success'
    outputs:
      test-results: ${{ steps.comprehensive-results.outputs.results }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust Environment
      uses: ./.github/actions/setup-rust
      with:
        rust-version: stable
        components: rustfmt,clippy
        cache-suffix: comprehensive

    - name: Build test binaries
      run: |
        echo "🏗️ Building ferris-sql-multi binary for integration tests..."
        cargo build --release --bin ferris-sql-multi --no-default-features

    - name: Run comprehensive tests
      id: comprehensive-tests
      run: |
        # Run all tests excluding performance and integration
        echo "Running comprehensive test suite..."
        cargo test --tests --no-default-features -- --skip integration:: --skip performance:: > comprehensive_results.txt 2>&1 || {
          echo "❌ Comprehensive tests failed"
          cat comprehensive_results.txt
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        }

        # Extract results
        PASSED=$(grep -o "test result: ok. [0-9]* passed" comprehensive_results.txt | grep -o "[0-9]*" | head -1 || echo "0")
        FAILED=$(grep -o "[0-9]* failed" comprehensive_results.txt | grep -o "[0-9]*" | head -1 || echo "0")

        echo "status=passed" >> $GITHUB_OUTPUT
        echo "passed=${PASSED}" >> $GITHUB_OUTPUT
        echo "failed=${FAILED}" >> $GITHUB_OUTPUT
        echo "✅ Comprehensive tests passed: ${PASSED} passed, ${FAILED} failed"

    - name: Run doctests
      run: cargo test --doc --no-default-features --quiet

    - name: Set comprehensive results output
      id: comprehensive-results
      run: |
        echo "results={\"status\":\"${{ steps.comprehensive-tests.outputs.status }}\",\"passed\":\"${{ steps.comprehensive-tests.outputs.passed }}\",\"failed\":\"${{ steps.comprehensive-tests.outputs.failed }}\"}" >> $GITHUB_OUTPUT

  # Report test results to PR
  report-test-results:
    name: Report Test Results
    runs-on: ubuntu-latest
    needs: [quick-check, comprehensive-tests]
    if: always() && github.event_name == 'pull_request'

    steps:
    - name: Comment Test Results
      uses: actions/github-script@v7
      with:
        script: |
          const quickCheck = ${{ toJson(needs.quick-check.outputs.test-results) }} || {status: "failed", passed: "0", failed: "1"};
          const comprehensive = ${{ toJson(needs.comprehensive-tests.outputs.test-results) }} || {status: "failed", passed: "0", failed: "1"};

          const quickStatus = quickCheck.status === 'passed' ? '✅' : '❌';
          const comprehensiveStatus = comprehensive.status === 'passed' ? '✅' : '❌';

          const comment = `## 🧪 Test Results

          ### Quick Check Tests ${quickStatus}
          - **Unit Tests**: ${quickCheck.passed} passed, ${quickCheck.failed} failed
          - **Status**: ${quickCheck.status === 'passed' ? '✅ All checks passed' : '❌ Some checks failed'}

          ### Comprehensive Tests ${comprehensiveStatus}
          - **Full Suite**: ${comprehensive.passed} passed, ${comprehensive.failed} failed
          - **Status**: ${comprehensive.status === 'passed' ? '✅ All tests passed' : '❌ Some tests failed'}

          ### Summary
          ${quickCheck.status === 'passed' && comprehensive.status === 'passed' ?
            '✅ **All tests passing** - Ready for review!' :
            '❌ **Tests failed** - Please check the workflow run for details'}

          View detailed results in the [workflow run](${context.payload.pull_request.html_url}/checks).`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });