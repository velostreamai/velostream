name: Quality & Security

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 6 * * 1' # Weekly on Mondays at 6 AM UTC

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-A dead_code -A unused"

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Add timeout for security audit

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust Environment
      uses: ./.github/actions/setup-rust
      with:
        rust-version: 1.91.0
        cache-suffix: security

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Security audit
      run: cargo audit

    - name: Check for known vulnerabilities
      run: |
        # Additional security checks
        echo "🔍 Checking for potential security issues..."

        # Check for hardcoded secrets (basic patterns)
        if grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]{8,}['\"]" src/ --exclude-dir=target; then
          echo "⚠️ Potential hardcoded credentials found"
        else
          echo "✅ No obvious hardcoded credentials detected"
        fi

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Add timeout for documentation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust Environment
      uses: ./.github/actions/setup-rust
      with:
        rust-version: 1.91.0
        cache-suffix: docs

    - name: Check documentation
      run: cargo doc --all-features --no-deps --document-private-items


  code-quality-analysis:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Reduced timeout for quality analysis only
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust Environment
      uses: ./.github/actions/setup-rust
      with:
        rust-version: 1.91.0
        cache-suffix: quality

    - name: Run code quality analysis
      run: |
        echo "🔍 Running code quality analysis..."
        # Check code patterns and potential improvements (non-failing)
        echo "📋 Checking for potential code improvements..."

        # Count TODO/FIXME comments
        TODO_COUNT=$(grep -r "TODO\|FIXME" src/ --include="*.rs" | wc -l || echo "0")
        echo "📝 TODO/FIXME comments found: $TODO_COUNT"

        # Check for long lines (>120 characters)
        LONG_LINES=$(find src -name "*.rs" -exec awk 'length($0) > 120 { count++ } END { print count+0 }' {} + | awk '{sum+=$1} END {print sum+0}')
        echo "📏 Lines over 120 characters: $LONG_LINES"

        # Run basic clippy without strict mode
        echo "🔍 Running basic clippy analysis..."
        cargo clippy --all-targets --no-default-features -- -A dead_code -A unused_imports -A unused_variables

    - name: Check code complexity
      run: |
        echo "📊 Analyzing code complexity..."
        # Count lines of code for basic metrics
        find src -name "*.rs" -exec wc -l {} + | tail -1 | awk '{print "Total lines of Rust code:", $1}'

        # Check for large functions (basic analysis)
        echo "🔍 Checking for large functions..."
        grep -n "fn " src/**/*.rs | wc -l | awk '{print "Total functions found:", $1}'

  msrv-check:
    name: MSRV Compatibility
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Add timeout for MSRV check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust Environment
      uses: ./.github/actions/setup-rust
      with:
        rust-version: 1.91.0
        cache-suffix: msrv

    - name: Check MSRV compatibility
      run: cargo check --all-features --no-default-features

  # Report quality results to PR
  report-quality-results:
    name: Report Quality Results
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Add timeout for reporting
    if: github.event_name == 'pull_request'
    needs: [security-audit, documentation, code-quality-analysis, msrv-check]

    steps:
    - name: Report quality status to PR
      uses: actions/github-script@v7
      with:
        script: |
          const securityStatus = '${{ needs.security-audit.result }}';
          const docsStatus = '${{ needs.documentation.result }}';
          const qualityStatus = '${{ needs.code-quality-analysis.result }}';
          const msrvStatus = '${{ needs.msrv-check.result }}';

          const getStatusIcon = (status) => status === 'success' ? '✅' : status === 'failure' ? '❌' : '⚠️';
          const getStatusText = (status) => status === 'success' ? 'Passed' : status === 'failure' ? 'Failed' : 'Skipped';

          const comment = `## 🔍 Quality & Security Report

          ### 🛡️ Security Audit
          **Status:** ${getStatusIcon(securityStatus)} ${getStatusText(securityStatus)}

          ### 📚 Documentation
          **Status:** ${getStatusIcon(docsStatus)} ${getStatusText(docsStatus)}

          ### 🔍 Code Quality Analysis
          **Status:** ${getStatusIcon(qualityStatus)} ${getStatusText(qualityStatus)}

          ### 🦀 MSRV Compatibility
          **Status:** ${getStatusIcon(msrvStatus)} ${getStatusText(msrvStatus)}

          ### 📋 Summary
          ${securityStatus === 'success' && docsStatus === 'success' && qualityStatus === 'success' && msrvStatus === 'success'
            ? '✅ **All quality checks passed** - Code meets quality standards!'
            : '❌ **Some quality checks failed** - Please review the workflow results'}

          View detailed results in the [workflow run](${context.payload.pull_request.html_url}/checks).`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });